package ru.inovus.egisz.medorg.callback;

import org.apache.cxf.annotations.SchemaValidation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.inovus.egisz.medorg.exceptions.ConsumerHttpBadGatewayException;
import ru.inovus.egisz.medorg.exceptions.NotDeliveredException;
import ru.inovus.egisz.medorg.rest.RestCallbackCommand;
import ru.inovus.egisz.medorg.rest.XmlResultContent;
import ru.inovus.egisz.medorg.service.JmsMessageExtractorBean;
import ru.inovus.egisz.medorg.util.HttpRequester;
import ru.inovus.egisz.medorg.util.XmlHelper;
import ru.rt.eu.nr.autogenerated.callback.mis.service.v1_0.Callback;

import javax.annotation.Resource;
import javax.ejb.EJB;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Queue;
import javax.jws.HandlerChain;
import javax.jws.WebMethod;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.BindingType;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.soap.SOAPBinding;
import java.net.HttpURLConnection;

/**
 * Обеспечивает получение результирующих сообщений из ЕГИСЗ ИПС
 */
@SchemaValidation
@WebService(name = "Callback", targetNamespace = "http://emu.callback.mis.service.nr.eu.rt.ru/", serviceName = "callback",
        wsdlLocation = "/ru/rt/eu/nr/callback/mis/service/v1.0.wsdl")
@HandlerChain(file = "handler-chain.xml")
@BindingType(value = SOAPBinding.SOAP12HTTP_BINDING)
public class CallbackServiceImpl implements Callback {

    private static final Logger logger = LoggerFactory.getLogger(CallbackServiceImpl.class);

    @EJB
    private JmsMessageExtractorBean jmsMessageExtractor;

    @Resource(lookup = "java:jboss/exported/jms/queue/RestCallbackQueue")
    private Queue restCallbackQueue;

    @Resource
    WebServiceContext context;

    /**
     * Обрабатывает полученное результирующее сообщение из ЕГИСЗ
     *
     * @param id       идентификатор принятого сообщения
     * @param oid      идентификатор базового объекта
     * @param response документ, кодированный в base64, который содержит результат обработки сообщения
     */
    @Override
    @WebMethod(action = "sendResponse")
    @WebResult(name = "status", targetNamespace = "")
    public int sendResponse(String id, String oid, String response) {

        int result = 0; //со стороны ИПС просили всегда возвращать 0

        logger.debug("MEDORG. Предпринимается попытка выполнения обработки результирующего сообщения ЕГИСЗ ИПС для id принятого сообщения {}: oid={}, response={}", id, oid, response);

        final RestCallbackCommand command = getRestCallbackCommand(id);

        if (command != null) {

            final String restCallbackUrl = command.getCallbackUrl();

            final String authorizedUserName = command.getAuthorizedUserName();

            logger.debug("MEDORG. Извлечено из очереди queue/RestCallbackQueue привязка restCallbackUrl {} к id принятого сообщения {} для потребителя {}", restCallbackUrl, id, authorizedUserName);

            final String data = getResultData(id, oid, response);

            logger.debug("MEDORG. Подготовлено к отправке на сервис {} потребителя {} результирующее сообщение: {}", restCallbackUrl, authorizedUserName, data);

            if(data != null) {
               responseDelivering(restCallbackUrl, authorizedUserName, data);
            }
        }

        return result;
    }

    /**
     * Доставка результирующего сообщения ЕГИСЗ ИПС на сервис потребителя
     * @param restCallbackUrl     url - для отправки результата обработки
     * @param authorizedUserName  логин авторизированного пользователя
     * @param data                строка результирующего сообщения подготовленного к отправке на сервис потребителя
     * @throws ConsumerHttpBadGatewayException
     */
    private void responseDelivering(String restCallbackUrl, String authorizedUserName, String data) {

        try {

            int responseCode;

            try {

                responseCode = HttpRequester.post(restCallbackUrl, data);

            } catch (Exception ex) {
                throw new NotDeliveredException(ex);
            }

            if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_ACCEPTED) {

                logger.debug("MEDORG. Доставлено на сервис {} потребителя {} результирующее сообщение: {}. HTTP-статус ответа: {}.", restCallbackUrl, authorizedUserName, data, responseCode);

            } else if (responseCode == HttpURLConnection.HTTP_BAD_GATEWAY) {

                throw new ConsumerHttpBadGatewayException("MEDORG. В связи с проблемой работы сервиса " + restCallbackUrl + " (HTTP-статус 502 Bad Gateway) потребителя " + authorizedUserName + ", не удалось доставить результирующее сообщение ЕГИСЗ ИПС: " + data);

            } else {

                throw new NotDeliveredException("HTTP-статус полученного сообщения от потребителя: " + responseCode);
            }

        } catch (NotDeliveredException ex) {

            logger.error("MEDORG. Не удалось доставить на сервис {} потребителя {} результирующее сообщение: {}.", restCallbackUrl, authorizedUserName, data, ex);
        }
    }

    /**
     * Возвращает restCallbackUrl для id принятого сообщения ЕГИСЗ ИПС
     *
     * @param egiszRespMessageId id принятого сообщения ЕГИСЗ ИПС
     * @return
     */
    private RestCallbackCommand getRestCallbackCommand(final String egiszRespMessageId) {

        RestCallbackCommand result = null;

        final Message jmsMessage = jmsMessageExtractor.getMessage(egiszRespMessageId, restCallbackQueue);

        if (jmsMessage != null) {

            try {

                return jmsMessage.getBody(RestCallbackCommand.class);

            } catch (JMSException e) {
                logger.error("MEDORG. Не удалось извлечь restCallbackUrl из JMS-сообщения queue/RestCallbackQueue для id принятого сообщения ЕГИСЗ ИПС {}", egiszRespMessageId);
            }

        } else {
            logger.warn("MEDORG. Не удалось найти привязку к restCallbackUrl в очереди queue/RestCallbackQueue для id принятого сообщения ЕГИСЗ ИПС {}", egiszRespMessageId);
        }

        return result;
    }

    /**
     * Возвращает тело запроса потребителю результирующего сообщения ЕГИСЗ
     *
     * @param egiszRespMessageId id принятого сообщения ЕГИСЗ
     * @param oid      идентификатор базового объекта
     * @param response документ, кодированный в base64, который содержит результат обработки сообщения
     * @return
     */
    private String getResultData(final String egiszRespMessageId, String oid, String response) {

        String result = null;

        final XmlResultContent content = new XmlResultContent(egiszRespMessageId, oid, response);

        try {

            result = XmlHelper.instanceToString(content, XmlResultContent.class);

        } catch (Exception ex) {
            logger.error("MEDORG. Не удалось преобразовать строку response в объект XmlResultContent для id принятого сообщения ЕГИСЗ ИПС {}: oid={}, response={}", egiszRespMessageId, oid, response, ex);
        }

        return result;
    }
}
