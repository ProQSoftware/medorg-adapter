package ru.inovus.egisz.medorg.callback;

import org.apache.cxf.annotations.SchemaValidation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.rt.eu.nr.autogenerated.callback.mis.service.v1_0.Callback;

import javax.annotation.Resource;
import javax.jms.*;
import javax.jws.HandlerChain;
import javax.jws.WebMethod;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.BindingType;
import javax.xml.ws.soap.SOAPBinding;

/**
 * Обеспечивает получение результирующих сообщений из ЕГИСЗ ИПС
 */
@SchemaValidation
@WebService(name = "Callback", targetNamespace = "http://emu.callback.mis.service.nr.eu.rt.ru/", serviceName = "callback",
        wsdlLocation = "/ru/rt/eu/nr/callback/mis/service/v1.0.wsdl")
@HandlerChain(file = "handler-chain.xml")
@BindingType(value = SOAPBinding.SOAP12HTTP_BINDING)
public class CallbackServiceImpl implements Callback {

    private static final Logger logger = LoggerFactory.getLogger(CallbackServiceImpl.class);

    @Resource
    private ConnectionFactory connectionFactory;

    @Resource(lookup = "java:jboss/exported/jms/queue/RestCallbackQueue")
    private Queue queue;

    /**
     * Обрабатывает полученное результирующее сообщение из ЕГИСЗ
     *
     * @param id       идентификатор принятого сообщения
     * @param oid      идентификатор базового объекта
     * @param response документ, кодированный в base64, который содержит результат обработки сообщения
     */
    @Override
    @WebMethod(action = "sendResponse")
    @WebResult(name = "status", targetNamespace = "")
    public int sendResponse(String id, String oid, String response) {

        int result = 0; //со стороны ИПС просили всегда возвращать 0

        logger.debug("MEDORG. Предпринимается попытка выполнения обработки результирующего сообщения ЕГИСЗ ИПС для id принятого сообщения {}: oid={}, response={}", id, oid, response);

        ResponseCommand responseCommand = new ResponseCommand(id, oid, response);

        try (JMSContext jmsContext = connectionFactory.createContext()) {
            jmsContext.createProducer().setDeliveryMode(DeliveryMode.PERSISTENT).setDeliveryDelay(300)
                    .setTimeToLive(24 * 60 * 60 * 1000).send(queue, responseCommand);
        }

        return result;
    }
}
